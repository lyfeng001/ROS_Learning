// Generated by gencpp from file snake_test/Serpentine.msg
// DO NOT EDIT!


#ifndef SNAKE_TEST_MESSAGE_SERPENTINE_H
#define SNAKE_TEST_MESSAGE_SERPENTINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_test
{
template <class ContainerAllocator>
struct Serpentine_
{
  typedef Serpentine_<ContainerAllocator> Type;

  Serpentine_()
    : alphaH(0.0)
    , alphaW(0.0)
    , gamma(0.0)  {
    }
  Serpentine_(const ContainerAllocator& _alloc)
    : alphaH(0.0)
    , alphaW(0.0)
    , gamma(0.0)  {
  (void)_alloc;
    }



   typedef double _alphaH_type;
  _alphaH_type alphaH;

   typedef double _alphaW_type;
  _alphaW_type alphaW;

   typedef double _gamma_type;
  _gamma_type gamma;





  typedef boost::shared_ptr< ::snake_test::Serpentine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_test::Serpentine_<ContainerAllocator> const> ConstPtr;

}; // struct Serpentine_

typedef ::snake_test::Serpentine_<std::allocator<void> > Serpentine;

typedef boost::shared_ptr< ::snake_test::Serpentine > SerpentinePtr;
typedef boost::shared_ptr< ::snake_test::Serpentine const> SerpentineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_test::Serpentine_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_test::Serpentine_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snake_test::Serpentine_<ContainerAllocator1> & lhs, const ::snake_test::Serpentine_<ContainerAllocator2> & rhs)
{
  return lhs.alphaH == rhs.alphaH &&
    lhs.alphaW == rhs.alphaW &&
    lhs.gamma == rhs.gamma;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snake_test::Serpentine_<ContainerAllocator1> & lhs, const ::snake_test::Serpentine_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snake_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::snake_test::Serpentine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_test::Serpentine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_test::Serpentine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_test::Serpentine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_test::Serpentine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_test::Serpentine_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_test::Serpentine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02f2567fa94bc953e03c031ebb7a9a8e";
  }

  static const char* value(const ::snake_test::Serpentine_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02f2567fa94bc953ULL;
  static const uint64_t static_value2 = 0xe03c031ebb7a9a8eULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_test::Serpentine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_test/Serpentine";
  }

  static const char* value(const ::snake_test::Serpentine_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_test::Serpentine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 alphaH\n"
"float64 alphaW\n"
"float64 gamma \n"
;
  }

  static const char* value(const ::snake_test::Serpentine_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_test::Serpentine_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.alphaH);
      stream.next(m.alphaW);
      stream.next(m.gamma);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Serpentine_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_test::Serpentine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snake_test::Serpentine_<ContainerAllocator>& v)
  {
    s << indent << "alphaH: ";
    Printer<double>::stream(s, indent + "  ", v.alphaH);
    s << indent << "alphaW: ";
    Printer<double>::stream(s, indent + "  ", v.alphaW);
    s << indent << "gamma: ";
    Printer<double>::stream(s, indent + "  ", v.gamma);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_TEST_MESSAGE_SERPENTINE_H
